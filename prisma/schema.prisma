// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/lib/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Unit {
  KRM
  TSK
  MSK
  CUP

  ML
  CL
  DL
  L

  G
  KG

  ST
  FÖRP
}

enum RecipeType {
  FÖRRÄTT
  HUVUDRÄTT
  EFTERRÄTT
  FRUKOST
  BRUNCH
  FIKA
  BAKVERK
  PLOCKMAT
  SNACKS
  DRYCK
  ÖVRIGT // Represent a recipe that does not fit into the main types
}

enum ProteinType {
  KÖTT
  FÅGEL
  FISK
  SKALDJUR
  MEJERI
  SOJA
  TOFU
  QOURN
  BÖNOR
  LINSER
  VEGOKÖTT
  TEMPEH
}

enum DietaryType {
  GLUTENFRI
  LAKTOSFRI
  MJÖLKFRI
  NÖTFRI
  SOJAFRI
  ÄGGFRI
  VEGETARISK
  VEGANSK
  LCHF
}

// The standardized Ingredient model
model Ingredient {
  id   String @id @default(cuid(2))
  name String @unique // canonical name in singular form

  displayNameSingular String // e.g., "Potatis"
  displayNamePlural   String // e.g., "Potatisar"

  shoppingUnit Unit

  ingredientCategory   IngredientCategory @relation(fields: [ingredientCategoryId], references: [id])
  ingredientCategoryId String

  ingredientAliases IngredientAlias[] // for alternative spellings

  // This ingredient can be part of many recipe ingredients
  recipes RecipeIngredient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ingredients")
}

model IngredientCategory {
  id   String @id @default(cuid(2))
  name String @unique // e.g., "Grönsaker & Frukt", "Skafferi"...

  ingredients Ingredient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ingredient_categories")
}

model IngredientAlias {
  id   String @id @default(cuid(2))
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  ingredientId String

  @@map("ingredient_aliases")
}

model RecipeIngredient {
  id           String  @id @default(cuid(2))
  displayOrder Int
  text         String
  note         String?
  quantity     Float?
  unit         Unit?

  // label?

  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId String

  // Each ingredient is used in at least one instruction (normally)
  instructions RecipeInstruction[]

  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("recipe_ingredients")
}

model RecipeInstruction {
  id   String @id @default(cuid(2))
  step Int
  text String

  // Each instruction may use multiple ingredients
  recipeIngredients RecipeIngredient[]

  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("recipe_instructions")
}

model Recipe {
  id          String  @id @default(cuid(2))
  slug        String  @unique
  name        String
  description String?
  recipeYield Int?
  imageUrl    String?

  recipeType  RecipeType
  proteinType ProteinType?
  // dietaryType DietaryType[] // not supported by sqlite

  totalTimeSeconds Int?
  // cookingMethod
  // category
  // cuisine

  recipeIngredients  RecipeIngredient[]
  recipeInstructions RecipeInstruction[]

  oven Int?

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  originalAuthor String?
  sourceUrl      String? @unique
  isImported     Boolean @default(false)

  savedBy SavedRecipe[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("recipes")
}

model SavedRecipe {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String

  savedAt DateTime @default(now())

  @@id([userId, recipeId])
  @@map("saved_recipes")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  createdRecipes Recipe[]
  savedRecipes   SavedRecipe[]

  profile UserProfile?

  @@unique([email])
  @@map("users")
}

model UserProfile {
  userId String @id
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Any additional user fields
  // dietaryRestrictions or dietaryPreferences?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_profiles")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("sessions")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("accounts")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verifications")
}
